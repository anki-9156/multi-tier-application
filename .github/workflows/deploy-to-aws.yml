name: Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: ecommerce-cluster
  FRONTEND_REPO: ecommerce/frontend
  BACKEND_REPO: ecommerce/backend
  DB_NAME: ecommerce
  DB_USERNAME: dbadmin

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "No tests found - skipping"

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --ci --coverage --watchAll=false || echo "No tests found - skipping"

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    outputs:
      backend-image: ${{ steps.build-images.outputs.backend-image }}
      frontend-image: ${{ steps.build-images.outputs.frontend-image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push images
        id: build-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build backend image
          docker build -t $ECR_REGISTRY/$BACKEND_REPO:$IMAGE_TAG -t $ECR_REGISTRY/$BACKEND_REPO:latest ./backend
          docker push $ECR_REGISTRY/$BACKEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$BACKEND_REPO:latest
          
          # Build frontend image
          docker build -t $ECR_REGISTRY/$FRONTEND_REPO:$IMAGE_TAG -t $ECR_REGISTRY/$FRONTEND_REPO:latest ./frontend
          docker push $ECR_REGISTRY/$FRONTEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$FRONTEND_REPO:latest
          
          # Output image URIs
          echo "backend-image=$ECR_REGISTRY/$BACKEND_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "frontend-image=$ECR_REGISTRY/$FRONTEND_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      alb-dns: ${{ steps.deploy-infra.outputs.alb-dns }}
      vpc-id: ${{ steps.deploy-infra.outputs.vpc-id }}
      sg-id: ${{ steps.deploy-infra.outputs.sg-id }}
      alb-arn: ${{ steps.deploy-infra.outputs.alb-arn }}
      frontend-tg-arn: ${{ steps.deploy-infra.outputs.frontend-tg-arn }}
      backend-tg-arn: ${{ steps.deploy-infra.outputs.backend-tg-arn }}
      subnet-ids: ${{ steps.deploy-infra.outputs.subnet-ids }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          chmod +x scripts/deploy-infrastructure.sh
          ./scripts/deploy-infrastructure.sh
          
          # Get ALB DNS name for output
          ALB_DNS=$(aws elbv2 describe-load-balancers --names ecommerce-alb --query 'LoadBalancers[0].DNSName' --output text)
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "ALB DNS: $ALB_DNS"
          
          # Export all infrastructure variables as outputs
          source /tmp/aws-env.sh
          echo "vpc-id=$VPC_ID" >> $GITHUB_OUTPUT
          echo "sg-id=$SG_ID" >> $GITHUB_OUTPUT
          echo "alb-arn=$ALB_ARN" >> $GITHUB_OUTPUT
          echo "frontend-tg-arn=$FRONTEND_TG_ARN" >> $GITHUB_OUTPUT
          echo "backend-tg-arn=$BACKEND_TG_ARN" >> $GITHUB_OUTPUT
          echo "subnet-ids=$SUBNET_IDS" >> $GITHUB_OUTPUT

  deploy-database:
    name: Deploy Database
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      db-endpoint: ${{ steps.deploy-db.outputs.db-endpoint }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy database
        id: deploy-db
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_NAME: ${{ env.DB_NAME }}
          VPC_ID: ${{ needs.deploy-infrastructure.outputs.vpc-id }}
          SG_ID: ${{ needs.deploy-infrastructure.outputs.sg-id }}
          SUBNET_IDS: ${{ needs.deploy-infrastructure.outputs.subnet-ids }}
        run: |
          # Create the aws-env.sh file with infrastructure and database variables
          mkdir -p /tmp
          echo "export VPC_ID=$VPC_ID" > /tmp/aws-env.sh
          echo "export SG_ID=$SG_ID" >> /tmp/aws-env.sh
          echo "export SUBNET_IDS='$SUBNET_IDS'" >> /tmp/aws-env.sh
          echo "export DB_PASSWORD=$DB_PASSWORD" >> /tmp/aws-env.sh
          echo "export DB_USERNAME=$DB_USERNAME" >> /tmp/aws-env.sh
          echo "export DB_NAME=$DB_NAME" >> /tmp/aws-env.sh
          
          # Debug: Check if DB_PASSWORD is set
          if [ -z "$DB_PASSWORD" ]; then
            echo "❌ ERROR: DB_PASSWORD is not set!"
            exit 1
          else
            echo "✅ DB_PASSWORD is set"
          fi
          
          chmod +x scripts/deploy-database.sh
          ./scripts/deploy-database.sh
          
          # Get database endpoint for output
          DB_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier database-2 --query 'DBInstances[0].Endpoint.Address' --output text)
          echo "db-endpoint=$DB_ENDPOINT" >> $GITHUB_OUTPUT

  deploy-ecs:
    name: Deploy ECS Services
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure, deploy-database]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account-id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Deploy ECS services
        env:
          AWS_ACCOUNT_ID: ${{ steps.account.outputs.account-id }}
          ECR_REGISTRY: ${{ steps.account.outputs.account-id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          VPC_ID: ${{ needs.deploy-infrastructure.outputs.vpc-id }}
          SG_ID: ${{ needs.deploy-infrastructure.outputs.sg-id }}
          ALB_ARN: ${{ needs.deploy-infrastructure.outputs.alb-arn }}
          FRONTEND_TG_ARN: ${{ needs.deploy-infrastructure.outputs.frontend-tg-arn }}
          BACKEND_TG_ARN: ${{ needs.deploy-infrastructure.outputs.backend-tg-arn }}
          SUBNET_IDS: ${{ needs.deploy-infrastructure.outputs.subnet-ids }}
          DB_ENDPOINT: ${{ needs.deploy-database.outputs.db-endpoint }}
        run: |
          # Create the aws-env.sh file with all required variables
          mkdir -p /tmp
          echo "export VPC_ID=$VPC_ID" > /tmp/aws-env.sh
          echo "export SG_ID=$SG_ID" >> /tmp/aws-env.sh
          echo "export ALB_ARN=$ALB_ARN" >> /tmp/aws-env.sh
          echo "export FRONTEND_TG_ARN=$FRONTEND_TG_ARN" >> /tmp/aws-env.sh
          echo "export BACKEND_TG_ARN=$BACKEND_TG_ARN" >> /tmp/aws-env.sh
          echo "export SUBNET_IDS='$SUBNET_IDS'" >> /tmp/aws-env.sh
          echo "export DB_ENDPOINT=$DB_ENDPOINT" >> /tmp/aws-env.sh
          echo "export DB_IDENTIFIER=database-2" >> /tmp/aws-env.sh
          
          chmod +x scripts/deploy-ecs.sh
          ./scripts/deploy-ecs.sh

      - name: Wait for services to stabilize
        run: |
          echo "Waiting for services to reach steady state..."
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services ecommerce-backend-service ecommerce-frontend-service
          echo "✅ Services are stable!"

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-ecs, deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB endpoint
        id: alb
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names ecommerce-alb --query 'LoadBalancers[0].DNSName' --output text)
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Test backend health
        run: |
          echo "Testing backend health endpoint..."
          for i in {1..10}; do
            if curl -f "http://${{ steps.alb.outputs.alb-dns }}:5000/health"; then
              echo "✅ Backend health check passed!"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 30s..."
              sleep 30
            fi
          done

      - name: Test frontend
        run: |
          echo "Testing frontend..."
          for i in {1..10}; do
            if curl -f "http://${{ steps.alb.outputs.alb-dns }}"; then
              echo "✅ Frontend is accessible!"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 30s..."
              sleep 30
            fi
          done

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-ecs, integration-tests]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get deployment info
        id: info
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers --names ecommerce-alb --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "N/A")
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** http://${{ steps.info.outputs.alb-dns }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** http://${{ steps.info.outputs.alb-dns }}:5000" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** http://${{ steps.info.outputs.alb-dns }}:5000/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ **Status:** Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi 