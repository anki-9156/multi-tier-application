name: Cleanup AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Type "DELETE" to confirm resource deletion'
        required: true
        type: string
      keep_ecr_images:
        description: 'Keep ECR images (recommended)'
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: ecommerce-cluster
  FRONTEND_REPO: ecommerce/frontend
  BACKEND_REPO: ecommerce/backend

jobs:
  validate-deletion:
    name: Validate Deletion Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_deletion }}" != "DELETE" ]; then
            echo "❌ Deletion not confirmed. You must type 'DELETE' to proceed."
            exit 1
          fi
          echo "✅ Deletion confirmed. Proceeding with resource cleanup..."

  cleanup-ecs:
    name: Cleanup ECS Services
    runs-on: ubuntu-latest
    needs: validate-deletion
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup ECS resources
        run: |
          chmod +x scripts/cleanup-ecs.sh
          ./scripts/cleanup-ecs.sh

  cleanup-database:
    name: Cleanup RDS Database
    runs-on: ubuntu-latest
    needs: cleanup-ecs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup database
        run: |
          chmod +x scripts/cleanup-database.sh
          ./scripts/cleanup-database.sh

  cleanup-infrastructure:
    name: Cleanup Infrastructure
    runs-on: ubuntu-latest
    needs: cleanup-database
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup infrastructure
        run: |
          chmod +x scripts/cleanup-infrastructure.sh
          ./scripts/cleanup-infrastructure.sh

  cleanup-ecr:
    name: Cleanup ECR (Optional)
    runs-on: ubuntu-latest
    needs: cleanup-infrastructure
    if: github.event.inputs.keep_ecr_images == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup ECR repositories
        env:
          FRONTEND_REPO: ${{ env.FRONTEND_REPO }}
          BACKEND_REPO: ${{ env.BACKEND_REPO }}
        run: |
          chmod +x scripts/cleanup-ecr.sh
          ./scripts/cleanup-ecr.sh

  cleanup-summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-ecs, cleanup-database, cleanup-infrastructure]
    if: always()
    steps:
      - name: Create cleanup summary
        run: |
          echo "## 🧹 AWS Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**ECR images kept:** ${{ github.event.inputs.keep_ecr_images }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Cleanup Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.cleanup-ecs.result }}" == "success" ]; then
            echo "✅ **ECS Services:** Cleaned up" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ECS Services:** Failed to clean up" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.cleanup-database.result }}" == "success" ]; then
            echo "✅ **RDS Database:** Cleaned up" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **RDS Database:** Failed to clean up" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.cleanup-infrastructure.result }}" == "success" ]; then
            echo "✅ **Infrastructure:** Cleaned up" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Infrastructure:** Failed to clean up" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 Cost Impact" >> $GITHUB_STEP_SUMMARY
          echo "- ECS Fargate tasks: **Stopped** (no more compute charges)" >> $GITHUB_STEP_SUMMARY
          echo "- RDS instance: **Deleted** (no more database charges)" >> $GITHUB_STEP_SUMMARY
          echo "- Load Balancer: **Deleted** (no more ALB charges)" >> $GITHUB_STEP_SUMMARY
          echo "- NAT Gateway: **Deleted** (no more data processing charges)" >> $GITHUB_STEP_SUMMARY 